/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CalendarEvent } from "./CalendarEvent";
import { CalendarEventCountArgs } from "./CalendarEventCountArgs";
import { CalendarEventFindManyArgs } from "./CalendarEventFindManyArgs";
import { CalendarEventFindUniqueArgs } from "./CalendarEventFindUniqueArgs";
import { CreateCalendarEventArgs } from "./CreateCalendarEventArgs";
import { UpdateCalendarEventArgs } from "./UpdateCalendarEventArgs";
import { DeleteCalendarEventArgs } from "./DeleteCalendarEventArgs";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { CalendarEventService } from "../calendarEvent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CalendarEvent)
export class CalendarEventResolverBase {
  constructor(
    protected readonly service: CalendarEventService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CalendarEvent",
    action: "read",
    possession: "any",
  })
  async _calendarEventsMeta(
    @graphql.Args() args: CalendarEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CalendarEvent])
  @nestAccessControl.UseRoles({
    resource: "CalendarEvent",
    action: "read",
    possession: "any",
  })
  async calendarEvents(
    @graphql.Args() args: CalendarEventFindManyArgs
  ): Promise<CalendarEvent[]> {
    return this.service.calendarEvents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CalendarEvent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CalendarEvent",
    action: "read",
    possession: "own",
  })
  async calendarEvent(
    @graphql.Args() args: CalendarEventFindUniqueArgs
  ): Promise<CalendarEvent | null> {
    const result = await this.service.calendarEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CalendarEvent)
  @nestAccessControl.UseRoles({
    resource: "CalendarEvent",
    action: "create",
    possession: "any",
  })
  async createCalendarEvent(
    @graphql.Args() args: CreateCalendarEventArgs
  ): Promise<CalendarEvent> {
    return await this.service.createCalendarEvent({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CalendarEvent)
  @nestAccessControl.UseRoles({
    resource: "CalendarEvent",
    action: "update",
    possession: "any",
  })
  async updateCalendarEvent(
    @graphql.Args() args: UpdateCalendarEventArgs
  ): Promise<CalendarEvent | null> {
    try {
      return await this.service.updateCalendarEvent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CalendarEvent)
  @nestAccessControl.UseRoles({
    resource: "CalendarEvent",
    action: "delete",
    possession: "any",
  })
  async deleteCalendarEvent(
    @graphql.Args() args: DeleteCalendarEventArgs
  ): Promise<CalendarEvent | null> {
    try {
      return await this.service.deleteCalendarEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Appointment], { name: "appointments" })
  @nestAccessControl.UseRoles({
    resource: "Appointment",
    action: "read",
    possession: "any",
  })
  async findAppointments(
    @graphql.Parent() parent: CalendarEvent,
    @graphql.Args() args: AppointmentFindManyArgs
  ): Promise<Appointment[]> {
    const results = await this.service.findAppointments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
