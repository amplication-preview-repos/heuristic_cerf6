/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CalendarEvent as PrismaCalendarEvent,
  Appointment as PrismaAppointment,
} from "@prisma/client";

export class CalendarEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CalendarEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.calendarEvent.count(args);
  }

  async calendarEvents(
    args: Prisma.CalendarEventFindManyArgs
  ): Promise<PrismaCalendarEvent[]> {
    return this.prisma.calendarEvent.findMany(args);
  }
  async calendarEvent(
    args: Prisma.CalendarEventFindUniqueArgs
  ): Promise<PrismaCalendarEvent | null> {
    return this.prisma.calendarEvent.findUnique(args);
  }
  async createCalendarEvent(
    args: Prisma.CalendarEventCreateArgs
  ): Promise<PrismaCalendarEvent> {
    return this.prisma.calendarEvent.create(args);
  }
  async updateCalendarEvent(
    args: Prisma.CalendarEventUpdateArgs
  ): Promise<PrismaCalendarEvent> {
    return this.prisma.calendarEvent.update(args);
  }
  async deleteCalendarEvent(
    args: Prisma.CalendarEventDeleteArgs
  ): Promise<PrismaCalendarEvent> {
    return this.prisma.calendarEvent.delete(args);
  }

  async findAppointments(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.calendarEvent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointments(args);
  }
}
